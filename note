需要解决的问题:
1. 乱码问题
	@RequestParam @PathVariable 的中文参数传入后台会乱码
-----------------------------------
1. 建立 springmvc 工程
1.1 maven project -> webapp
1.2 copy pom.xml
1.3 补全工程结构, src/main/java
1.4 maven update

2. springmvc 的 helloworld
2.1 web.xml 中添加 springmvc servlet
url 改成 /
2.2 WEB-INF/servletname-servlet.xml
component-scan
InternalResourceViewResolver
2.3
ui 页与结果页
<a href="springmvc/hello">Hello, springmvc!</a>
handler
@Controller
@RequestMapping("/springmvc")
public class Handler {
	
	@RequestMapping("/hello")
	public String handle1(){
		System.out.println("handle1");
		return "success";
	}
}

3. @RequestMapping @RequestParam
eg: handle2-
value, method, params
value: 请求的url. @RequestMapping 可以在两个地方出现，一个是 handler, 一个是 handle.
两个地方合起来就是完整的请求 url
method: 表示只能处理指定的 method. method=RequestMethod.POST
params: 
- params = "params1" 必须包含 param1 参数
- params = "!params1" 必须不包含 param1 参数
- params = "params1 != value1" 必须包含 params1 参数, 且 param1 的值不能是 value1; 注意，这个测试下来
没有 params1 也是对的
- params = {"params1 = value1", "params2"} 必须包含 params1, params2, 且 params1 
的值必须是 value1.

获取参数
	@RequestMapping(value = "/handle3", params="userId")
	public String handle3(@RequestParam("userId") String name){
		System.out.println("handle3 userId = " + name);
		return "success";
	}
	参数中文传入后台会有乱码

4. @PathVariable 
	@RequestMapping("/handle1/{name}")
	public String handle1(@PathVariable("name") String xxx) {
		System.out.println("handle1 + name = " + xxx);
		return "success";
	}
参数中文传入后台会乱码...

	
5. REST 
HiddenHpptMethodFilter 将 post 转换为 post put delete
post 新增
put 更新
delete 删除
5.1 web.xml 中添加:
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
5.2 
	<form action="springmvc/testRest/1" method="post">
		<input type="hidden" name="_method" value="PUT"/>
		<input type="submit" value="TestRest PUT"/>
	</form>
	<br><br>
	
	<form action="springmvc/testRest/1" method="post">
		<input type="hidden" name="_method" value="DELETE"/>
		<input type="submit" value="TestRest DELETE"/>
	</form>
	<br><br>
	
	<form action="springmvc/testRest" method="post">
		<input type="submit" value="TestRest POST"/>
	</form>
	<br><br>
	
	<a href="springmvc/testRest/1">Test Rest Get</a>
	<br><br>

6. @RequestParam 
value default ""
required default true
defaultValue default ValueConstants.DEFAULT_NONE 这是个非空的值

7. @CookieValue 与 @RequestParam 差不多, 可以让方法入参绑定某个 cookie 值

8. 入参绑定 pojo
form method get post 有什么区别？ 好像中文乱码会有区别
如果出现 400 错误, 应该是 form 表单中的 name 与 pojo 类的字段不一致， 或者 pojo 中有 Date 类型，没有转换

9. Servlet API 作为入参 

10. 处理模型数据
页面不支持 el 表达式: <%@ page isELIgnored="false" %>
10.1 ModelAndView

	@RequestMapping("/testModelAndView")
	public ModelAndView handle1() {
		ModelAndView mv = new ModelAndView();
		mv.addObject("time", new Date());
		mv.setViewName("success");
		return mv;
	}

模型数据放在了请求域中, ${requestScope.time } 这样去访问

10.2 map 类型的入参
	@RequestMapping("/testMap")
	public String handle2(Map<String, Object> map) {
		map.put("names", Arrays.asList("tom", "赵波", "jack"));
		return "success";
	}

10.3 @SessionAttributes 将模型数据放入 session 域中
@SessionAttributes(value = {"names", "time", "user"})
这个注解会引发一个异常

10.4 @ModelAttribute
	@ModelAttribute
	public void getUser(@RequestParam(value = "id", required = false) Integer id, 
			Map<String, Object> map) {
		System.out.println("model attribute method ..."); // 每个 handle 方法执行前都会 执行
		if(id != null) { //如果 id 不为空, 那就从数据库中取出 user 放入 map 中, 之后赋值给 hangle 的入参
			User user = new User(1, "zhaobo", "赵波", "123456", "19860529"); // 模拟从数据库中取出 user
			map.put("user", user); // 放入 map 中
		}
	}
	@RequestMapping("/testModelAttribute")
	public String handle3(User user) {
		System.out.println("修改后的 user: " + user);
		return "success";
	}
	
/**
	 * 运行流程:
	 * 1. 执行 @ModelAttribute 注解修饰的方法: 从数据库中取出对象, 把对象放入到了 Map 中. 键为: user
	 * 2. SpringMVC 从 Map 中取出 User 对象, 并把表单的请求参数赋给该 User 对象的对应属性.
	 * 3. SpringMVC 把上述对象传入目标方法的参数. 
	 * 
	 * 注意: 在 @ModelAttribute 修饰的方法中, 放入到 Map 时的键需要和目标方法入参类型的第一个字母小写的字符串一致!
	 * 
	 * SpringMVC 确定目标方法 POJO 类型入参的过程
	 * 1. 确定一个 key:
	 * 1). 若目标方法的 POJO 类型的参数木有使用 @ModelAttribute 作为修饰, 则 key 为 POJO 类名第一个字母的小写
	 * 2). 若使用了  @ModelAttribute 来修饰, 则 key 为 @ModelAttribute 注解的 value 属性值. 
	 * 2. 在 implicitModel 中查找 key 对应的对象, 若存在, 则作为入参传入
	 * 1). 若在 @ModelAttribute 标记的方法中在 Map 中保存过, 且 key 和 1 确定的 key 一致, 则会获取到. 
	 * 3. 若 implicitModel 中不存在 key 对应的对象, 则检查当前的 Handler 是否使用 @SessionAttributes 注解修饰, 
	 * 若使用了该注解, 且 @SessionAttributes 注解的 value 属性值中包含了 key, 则会从 HttpSession 中来获取 key 所
	 * 对应的 value 值, 若存在则直接传入到目标方法的入参中. 若不存在则将抛出异常. 
	 * 4. 若 Handler 没有标识 @SessionAttributes 注解或 @SessionAttributes 注解的 value 值中不包含 key, 则
	 * 会通过反射来创建 POJO 类型的参数, 传入为目标方法的参数
	 * 5. SpringMVC 会把 key 和 POJO 类型的对象保存到 implicitModel 中, 进而会保存到 request 中. 
	 * 
	 * 源代码分析的流程
	 * 1. 调用 @ModelAttribute 注解修饰的方法. 实际上把 @ModelAttribute 方法中 Map 中的数据放在了 implicitModel 中.
	 * 2. 解析请求处理器的目标参数, 实际上该目标参数来自于 WebDataBinder 对象的 target 属性
	 * 1). 创建 WebDataBinder 对象: 
	 * 有两个属性; objectName, 要绑定的入参的名字; target 要绑定的入参对象;
	 * ①. 确定 objectName 属性: 若传入的 attrName 属性值为 "", 则 objectName 为目标方法入参的类名的第一个字母小写. 
	 * *注意: attrName. 若目标方法的 POJO 属性使用了 @ModelAttribute 来修饰, 则 attrName 值即为 @ModelAttribute
	 * 的 value 属性值, 否则就是 "";
	 * 
	 * ②. 确定 target 属性: 
	 * 	> 在 implicitModel 中查找 attrName 对应的属性值. 若存在, ok
	 * 	> *若不存在: 则验证当前 Handler 是否使用了 @SessionAttributes 进行修饰, 若使用了, 则尝试从 Session 中
	 * 获取 attrName 所对应的属性值. 若 session 中没有对应的属性值, 则抛出了异常. 
	 * 	> 若 Handler 没有使用 @SessionAttributes 进行修饰, 或 @SessionAttributes 中没有使用 value 值指定的 key
	 * 和 attrName 相匹配, 则通过反射创建了 POJO 对象
	 * 
	 * 2). SpringMVC 把表单的请求参数赋给了 WebDataBinder 的 target 对应的属性. 
	 * 3). *SpringMVC 会把 WebDataBinder 的 attrName 和 target 给到 implicitModel. 
	 * 近而传到 request 域对象中. 
	 * 4). 把 WebDataBinder 的 target 作为参数传递给目标方法的入参. 
	 */
	 
11. View 和 ViewResolver : 视图和视图解析器
无论 handle 返回 String 或者 View 或者 ModelAndView, springmvc 内部最后都包装为 ModelAndView.
ViewResolver 将逻辑视图转换为物理视图.
常用的 View： 
url 资源视图 InternalResourceView: jsp 及转发; JstlView: 国际化
文档视图 AbstractExcelView: excel 文档; AbstractPdfView: pdf
报表视图
JSON视图 MappingJacksonJsonView: 将模型数据通过 Jackson 开发的 ObjectMapper 以 JSON 方式输出.

常用的视图解析器
Bean 类型 BeanNameViewResolver
Url 类型 InternalResourceView JasperReportsViewResolver
模版文件类型 FreeMarkerViewResolver

每个视图解析器都实现了 Order 接口并开放 order 属性, 多个视图解析器之间通过 order 值指定先后顺序, 
order 值越小, 优先级越高; InternalResourceViewResolver 默认 order 是 Integer 的最大值.
所以其他视图解析器只要定义了 order, 优先级就会比 InternalResouceViewResolver 高.

11.1 
默认 View 是 InternalResourceView, 当加入 jstl 库的时候自动转换为 JstlView

11.2 国际化标签
1) 添加国际化配置文件
i18n.properties
	i18n.username=username
	i18n.password=password
i18n_zh_CN.properties
	改成中文
i18n_en_US.properties
2) 在 springmvc 配置文件中配置
	<bean id="messageSource" 
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>	
	</bean>
3) 页面
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
	<br>
	<fmt:message key="i18n.username"></fmt:message>
	<br>
	<fmt:message key="i18n.password"></fmt:message>

11.3 配置直接转发的页面
	<!-- 配置直接转发的页面 -->
	<!-- 可以直接相应转发的页面, 而无需再经过 Handler 的方法.  -->
	<mvc:view-controller path="/success" view-name="success"/>
	
	<!-- 在实际开发中通常都需配置 mvc:annotation-driven 标签 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
配好后, 浏览器中直接输入 http://localhost:8080/springmvc4/success 即可进入 success 页面

11.4 自定义视图
1) 创建一个继承 View 接口的视图类, 注意加入 @Component
2) 配置视图解析器 BeanNameViewResolver --> 所以视图名应该是自定义视图类的第一个字母小写

11.5 excel 视图
以后补充学习

